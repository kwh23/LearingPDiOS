#N canvas 210 113 889 676 10;
#X obj 137 50 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 137 70 s onOff;
#X obj 515 169 soundfiler;
#X obj 90 518 tabread4~ fileL;
#X obj 102 381 phasor~;
#X floatatom 509 229 12 0 0 0 - - -, f 12;
#X obj 507 201 / 44100;
#N canvas 552 305 925 542 arrays 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array fileL 1.96175e+06 float 0;
#X coords 0 1 1.96174e+06 -1 200 140 1 0 0;
#X restore 97 0 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X array fileR 1.96175e+06 float 0;
#X coords 0 1 1.96174e+06 -1 200 140 1 0 0;
#X restore 108 240 graph;
#X restore 574 87 pd arrays;
#X obj 570 197 s fileLenSamps;
#X obj 625 229 r fileLenSamps;
#X obj 627 299 s playbackRate;
#X obj 621 260 expr 44100 / $f1;
#X floatatom 72 287 5 0 0 0 - - -, f 5;
#X msg 162 353 0;
#X obj 108 639 dac~;
#X obj 209 518 tabread4~ fileR;
#X obj 45 248 r playbackRate;
#X obj 99 439 *~;
#X obj 155 408 r fileLenSamps;
#X obj 176 230 r onOff;
#X obj 108 325 f;
#X obj 492 104 loadbang;
#X obj 159 264 sel 1 0;
#X msg 175 317 0;
#X msg 496 140 read -resize testAudio_stereo.wav fileL fileR;
#X floatatom 470 515 0 0 1000 0 - - -;
#N canvas 98 22 648 669 fft-analysis 0;
#X obj 35 589 *~;
#X obj 143 305 *~;
#X obj 158 150 *~;
#X obj 35 72 *~;
#X obj 76 527 *~;
#X obj 35 44 inlet~;
#X obj 35 528 *~;
#X obj 34 101 rfft~;
#X obj 35 558 rifft~;
#X obj 36 616 outlet~;
#X obj 119 149 *~;
#X obj 119 176 +~;
#X obj 165 278 r mask-level;
#X obj 100 422 /~;
#X obj 355 23 block~ 1024 4;
#X text 176 446 is signal power and "m" is mask.;
#X obj 131 332 -~;
#X obj 131 355 max~ 0;
#X obj 99 448 q8_sqrt~;
#X text 175 464 (zero if s < m).;
#X obj 144 256 tabreceive~ \$0-mask;
#X obj 76 72 tabreceive~ \$0-hann;
#X obj 69 590 tabreceive~ \$0-hann;
#N canvas 91 250 910 495 calculate-mask 0;
#X obj 125 379 inlet~;
#X msg 371 283 0;
#X msg 371 166 0;
#X obj 240 196 float;
#X obj 294 200 + 1;
#X obj 240 144 bang~;
#X obj 240 169 spigot;
#X floatatom 411 218 0 0 0 0 - - -;
#X obj 315 408 -~;
#X obj 371 258 sel 0;
#X obj 327 443 *~;
#X obj 293 443 +~;
#X floatatom 351 313 0 0 0 0 - - -;
#X obj 240 219 t f f;
#X obj 370 113 r make-mask;
#X obj 371 141 t b f;
#X obj 411 165 /;
#X text 483 212 number of;
#X text 491 227 frames;
#X floatatom 481 166 0 0 0 0 - - -;
#X obj 480 113 r window-msec;
#X obj 481 136 / 4;
#X text 521 133 hop size (analysis;
#X text 546 149 period) in msec;
#X obj 359 408 tabreceive~ \$0-mask;
#X obj 292 468 tabsend~ \$0-mask;
#X obj 371 218 <;
#X obj 235 258 expr 1/($f1+1);
#X text 134 17 calculate a mask using N msec of background noise;
#X text 43 354 current power (for each channel);
#X text 367 430 average the current power into the last mask to get
the new mask. The new value is weighted 1/n on the nth iteration.;
#X text 390 312 weight to average in new power to mask;
#X text 11 203 loop counting to desired;
#X text 78 219 number of frames;
#X text 72 39 This loops for "make-mask" milliseconds \, averaging
power in each channel over that amount of time. This is done by a moving
average whose weight is adjusted to average each new value equally
with each of the accumulating ones.;
#X connect 0 0 8 0;
#X connect 1 0 12 0;
#X connect 2 0 3 1;
#X connect 2 0 26 0;
#X connect 3 0 13 0;
#X connect 3 0 4 0;
#X connect 4 0 3 1;
#X connect 5 0 6 0;
#X connect 6 0 3 0;
#X connect 7 0 26 1;
#X connect 8 0 10 0;
#X connect 9 0 1 0;
#X connect 10 0 11 1;
#X connect 11 0 25 0;
#X connect 12 0 10 1;
#X connect 13 0 26 0;
#X connect 13 1 27 0;
#X connect 14 0 15 0;
#X connect 15 0 2 0;
#X connect 15 1 16 0;
#X connect 16 0 7 0;
#X connect 20 0 21 0;
#X connect 21 0 16 1;
#X connect 21 0 19 0;
#X connect 24 0 8 1;
#X connect 24 0 11 0;
#X connect 26 0 6 1;
#X connect 26 0 9 0;
#X connect 27 0 12 0;
#X restore 132 203 pd calculate-mask;
#X text 91 98 real Fourier transform;
#X obj 357 57 loadbang;
#X msg 357 80 \; pd dsp 1 \; window-size 1024;
#X text 193 355 ... but not less than zero;
#X text 101 561 real inverse Fourier transform;
#X text 196 498 normalize by 2/(3N) where N is window size;
#X text 168 332 current power ("s") minus level-adjusted mask ("m")
;
#X text 156 175 compute power (call it "s") in each channel;
#X obj 123 395 +~ 1e-20;
#X text 203 395 protect against division by zero;
#X text 179 426 compute sqrt((s-m)/s) where "s";
#X text 296 204 <- subwindow calculates noise mask;
#X obj 98 499 /~ 1536;
#X connect 0 0 9 0;
#X connect 1 0 16 1;
#X connect 2 0 11 1;
#X connect 3 0 7 0;
#X connect 4 0 8 1;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 0 10 0;
#X connect 7 0 10 1;
#X connect 7 1 4 0;
#X connect 7 1 2 0;
#X connect 7 1 2 1;
#X connect 8 0 0 0;
#X connect 10 0 11 0;
#X connect 11 0 16 0;
#X connect 11 0 23 0;
#X connect 11 0 32 0;
#X connect 12 0 1 1;
#X connect 13 0 18 0;
#X connect 16 0 17 0;
#X connect 17 0 13 0;
#X connect 18 0 36 0;
#X connect 20 0 1 0;
#X connect 21 0 3 1;
#X connect 22 0 0 1;
#X connect 25 0 26 0;
#X connect 32 0 13 1;
#X connect 36 0 6 1;
#X connect 36 0 4 1;
#X restore 93 599 pd fft-analysis;
#N canvas 0 110 565 454 hann-window 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-hann 1024 float 0;
#X coords 0 1 1023 0 300 100 1;
#X restore 82 311 graph;
#X obj 378 165 osc~;
#X obj 378 190 *~ -0.5;
#X obj 378 214 +~ 0.5;
#X obj 331 247 tabwrite~ \$0-hann;
#X obj 37 88 r window-size;
#X obj 38 173 /;
#X obj 127 142 samplerate~;
#X obj 38 251 s window-sec;
#X obj 177 204 swap;
#X obj 177 228 /;
#X obj 177 252 s window-hz;
#X obj 49 201 * 1000;
#X obj 49 228 s window-msec;
#X obj 38 115 t f b f;
#X msg 173 92 resize \$1;
#X obj 173 116 s \$0-hann;
#X obj 330 105 r window-hz;
#X msg 382 130 0;
#X obj 330 131 t f b;
#X text 15 8 calculate Hann window table (variable window size) and
constants window-hz (fundamental frequency of analysis) \, window-sec
and window-msec (analysis window size in seconds and msec).;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 5 0 14 0;
#X connect 6 0 8 0;
#X connect 6 0 12 0;
#X connect 7 0 6 1;
#X connect 7 0 9 1;
#X connect 9 0 10 0;
#X connect 9 1 10 1;
#X connect 10 0 11 0;
#X connect 12 0 13 0;
#X connect 14 0 6 0;
#X connect 14 0 9 0;
#X connect 14 1 7 0;
#X connect 14 2 15 0;
#X connect 15 0 16 0;
#X connect 17 0 19 0;
#X connect 18 0 1 1;
#X connect 19 0 1 0;
#X connect 19 1 4 0;
#X connect 19 1 18 0;
#X restore 485 587 pd hann-window;
#X obj 470 540 s mask-level;
#X text 523 467 off;
#X msg 515 488 0;
#X text 597 420 calculate noise mask;
#X msg 616 447 \; make-mask 2000;
#N canvas 0 22 592 442 mask-table 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-mask 512 float 1;
#A 0 16.2981 93.5908 133.494 58.0991 27.9377 28.7636 25.6853 10.38
4.49874 1.72265 2.13313 31.2539 59.4002 26.4917 17.4022 11.065 8.00853
2.22658 2.14426 2.42191 5.13019 4.27428 7.24516 25.7294 25.4726 16.1268
2.82972 5.2736 6.62097 2.08677 1.53868 1.99084 1.8223 2.08592 6.21534
4.81775 4.27059 3.58581 0.998377 1.09754 3.16495 5.95419 2.22402 0.944531
0.862054 6.5788 13.6634 3.62875 5.36593 6.51338 1.74535 2.25296 1.44652
2.06104 4.92463 4.86171 1.58474 3.61487 3.32143 1.0687 1.15533 1.74662
0.880043 0.464595 0.561458 0.685393 0.772155 0.823682 0.721149 0.5084
0.476248 0.307991 0.356082 0.501214 0.34369 0.290472 0.387529 0.548087
0.395167 0.367337 0.343855 0.298961 0.275516 0.304592 0.371511 0.378633
0.272438 0.234309 0.303393 0.368324 0.322867 0.53256 0.536111 0.343075
0.260918 0.230528 0.198494 0.265468 0.310974 0.298215 0.3052 0.269152
0.278274 0.356386 0.256479 0.34512 0.326068 0.3342 0.233539 0.310534
0.236299 0.192836 0.190606 0.206748 0.259948 0.20369 0.0999768 0.0988512
0.103551 0.110007 0.127278 0.207569 0.261481 0.203192 0.179489 0.249775
0.226914 0.104234 0.131687 0.152865 0.148897 0.152006 0.126081 0.168327
0.564229 0.870614 0.685107 0.388028 0.281496 0.178582 0.121745 0.152569
0.175851 0.133332 0.0802981 0.0984884 0.185591 0.313135 0.301364 0.112858
0.132569 0.172826 0.218417 0.265167 0.224368 0.18973 0.154447 0.115984
0.194982 0.257608 0.144328 0.11858 0.188651 0.112425 0.0982078 0.0935483
0.102602 0.121592 0.123127 0.210163 0.275336 0.191457 0.178523 0.288484
0.233136 0.0910001 0.110283 0.128343 0.201019 0.22132 0.147931 0.173995
0.18202 0.185882 0.165796 0.130342 0.110212 0.0955814 0.140464 0.315862
0.385076 0.252652 0.212831 0.236002 0.254514 0.230263 0.138955 0.2458
0.208343 0.329142 0.659972 0.338149 0.259906 0.24114 0.259938 0.178503
0.185396 0.146821 0.123183 0.19697 0.389735 0.349346 0.25553 0.2925
0.226039 0.0813756 0.0560034 0.135002 0.185209 0.0961396 0.0893059
0.14972 0.103346 0.0891705 0.0989998 0.0976764 0.131425 0.113834 0.156765
0.126183 0.0690582 0.111199 0.0913622 0.0488318 0.0615365 0.126023
0.12984 0.0714073 0.0407481 0.0481205 0.0425065 0.0234677 0.00998272
0.0102768 0.0141295 0.0135082 0.00836322 0.0100894 0.0103956 0.00778308
0.00736682 0.00799189 0.00781608 0.00784564 0.0110389 0.00992691 0.0084258
0.0095326 0.0114695 0.00866472 0.00560611 0.00711045 0.00776466 0.00739353
0.00947507 0.0110458 0.010581 0.00781689 0.00608141 0.00631433 0.00918986
0.00843817 0.0057011 0.00776879 0.00856195 0.00904654 0.00604377 0.00517405
0.00669719 0.00496536 0.00392038 0.00486509 0.00620381 0.00524646 0.00462123
0.00406276 0.00526667 0.00514198 0.0069046 0.00693555 0.00399711 0.00570187
0.0061832 0.00592475 0.00365299 0.00314626 0.00460033 0.00497356 0.00421104
0.00440066 0.00409128 0.00320042 0.00287894 0.00261714 0.00192174 0.00225252
0.00304539 0.00399857 0.00235865 0.00199893 0.00326074 0.00369529 0.00317837
0.00320617 0.00254986 0.00343843 0.00357956 0.00282511 0.00230149 0.00245095
0.00260118 0.00195402 0.00276867 0.00279856 0.0025706 0.00292868 0.00393726
0.00383245 0.00312313 0.00253081 0.00244759 0.00202515 0.00205309 0.00223298
0.00196808 0.00177814 0.00201015 0.00237216 0.00202846 0.00203694 0.0022594
0.00211961 0.00165436 0.00144586 0.00152664 0.00164783 0.001448 0.000874445
0.00112253 0.00163955 0.00135737 0.000953713 0.000785957 0.000991214
0.0018068 0.00169855 0.00105577 0.000681275 0.000686793 0.000731663
0.000629301 0.00059651 0.000748298 0.00113406 0.00119588 0.00101879
0.000986147 0.000678942 0.000570166 0.000644928 0.000884708 0.000741627
0.000487429 0.000465532 0.00069933 0.000541832 0.000379951 0.000230957
0.000171891 0.000231803 0.000550426 0.000776416 0.000754341 0.000506542
0.00038079 0.000342473 0.000334854 0.000358571 0.000235961 0.000166119
0.00021235 0.000270336 0.000241956 0.000273711 0.000350812 0.00039883
0.000340748 0.00022535 0.000264037 0.000359113 0.000213644 0.000300299
0.000398303 0.000421011 0.000615863 0.000698354 0.000547293 0.000380963
0.000327939 0.000322069 0.000606353 0.000571209 0.000709726 0.000841399
0.000616378 0.000407868 0.000430599 0.000572296 0.000730763 0.000434396
0.000203407 0.000156149 0.000223945 0.000233206 0.000261001 0.000244017
0.000320801 0.000321897 0.000364981 0.000468177 0.000443069 0.000577041
0.000382265 0.000214682 0.000376989 0.000551805 0.00048279 0.000337892
0.000284617 0.000259575 0.000219931 0.000216373 0.000217442 0.00022439
0.000216846 0.000192839 0.000248911 0.000280495 0.000210805 0.000184142
0.000186252 0.000152792 0.000112442 0.000151744 0.000205263 0.000177269
0.000185035 0.000210033 0.000148828 0.000156753 0.000161559 0.00030124
0.000366389 0.000238751 0.000159394 0.000182465 0.000184138 0.000128703
0.000102644 0.000137243 0.000257607 0.000332698 0.000366883 0.000358016
0.000330823 0.000235453 0.000177585 0.000162942 0.000177868 0.000169641
0.0001594 0.000206226 0.000347653 0.000528151 0.000461426 0.000337071
0.000233086 0.000214786 0.000197756 0.000176192 0.00017851 0.00019775
0.000259823 0.000293001 0.000291704 0.000342223 0.000268711 0.000231488
0.000136007 0.000234459 0.000257241 0.000251838 0.000260796 0.000284005
0.000660916 0.00071779 0.000728177 0.00084832 0.000677003 0.000565472
0.000518715 0.000559413;
#X coords 0 500 511 0 400 300 1;
#X restore 110 76 graph;
#X text 25 14 This table (1002-mask) is the average power measured
in each channel of the spectrum \, presumed to represent the noise
floor.;
#X restore 485 609 pd mask-table;
#N canvas 98 22 648 669 fft-analysis 0;
#X obj 35 589 *~;
#X obj 143 305 *~;
#X obj 158 150 *~;
#X obj 35 72 *~;
#X obj 76 527 *~;
#X obj 35 44 inlet~;
#X obj 35 528 *~;
#X obj 34 101 rfft~;
#X obj 35 558 rifft~;
#X obj 36 616 outlet~;
#X obj 119 149 *~;
#X obj 119 176 +~;
#X obj 165 278 r mask-level;
#X obj 100 422 /~;
#X obj 355 23 block~ 1024 4;
#X text 176 446 is signal power and "m" is mask.;
#X obj 131 332 -~;
#X obj 131 355 max~ 0;
#X obj 99 448 q8_sqrt~;
#X text 175 464 (zero if s < m).;
#X obj 144 256 tabreceive~ \$0-mask;
#X obj 76 72 tabreceive~ \$0-hann;
#X obj 69 590 tabreceive~ \$0-hann;
#N canvas 91 250 910 495 calculate-mask 0;
#X obj 125 379 inlet~;
#X msg 371 283 0;
#X msg 371 166 0;
#X obj 240 196 float;
#X obj 294 200 + 1;
#X obj 240 144 bang~;
#X obj 240 169 spigot;
#X floatatom 411 218 0 0 0 0 - - -;
#X obj 315 408 -~;
#X obj 371 258 sel 0;
#X obj 327 443 *~;
#X obj 293 443 +~;
#X floatatom 351 313 0 0 0 0 - - -;
#X obj 240 219 t f f;
#X obj 370 113 r make-mask;
#X obj 371 141 t b f;
#X obj 411 165 /;
#X text 483 212 number of;
#X text 491 227 frames;
#X floatatom 481 166 0 0 0 0 - - -;
#X obj 480 113 r window-msec;
#X obj 481 136 / 4;
#X text 521 133 hop size (analysis;
#X text 546 149 period) in msec;
#X obj 359 408 tabreceive~ \$0-mask;
#X obj 292 468 tabsend~ \$0-mask;
#X obj 371 218 <;
#X obj 235 258 expr 1/($f1+1);
#X text 134 17 calculate a mask using N msec of background noise;
#X text 43 354 current power (for each channel);
#X text 367 430 average the current power into the last mask to get
the new mask. The new value is weighted 1/n on the nth iteration.;
#X text 390 312 weight to average in new power to mask;
#X text 11 203 loop counting to desired;
#X text 78 219 number of frames;
#X text 72 39 This loops for "make-mask" milliseconds \, averaging
power in each channel over that amount of time. This is done by a moving
average whose weight is adjusted to average each new value equally
with each of the accumulating ones.;
#X connect 0 0 8 0;
#X connect 1 0 12 0;
#X connect 2 0 3 1;
#X connect 2 0 26 0;
#X connect 3 0 13 0;
#X connect 3 0 4 0;
#X connect 4 0 3 1;
#X connect 5 0 6 0;
#X connect 6 0 3 0;
#X connect 7 0 26 1;
#X connect 8 0 10 0;
#X connect 9 0 1 0;
#X connect 10 0 11 1;
#X connect 11 0 25 0;
#X connect 12 0 10 1;
#X connect 13 0 26 0;
#X connect 13 1 27 0;
#X connect 14 0 15 0;
#X connect 15 0 2 0;
#X connect 15 1 16 0;
#X connect 16 0 7 0;
#X connect 20 0 21 0;
#X connect 21 0 16 1;
#X connect 21 0 19 0;
#X connect 24 0 8 1;
#X connect 24 0 11 0;
#X connect 26 0 6 1;
#X connect 26 0 9 0;
#X connect 27 0 12 0;
#X restore 132 203 pd calculate-mask;
#X text 91 98 real Fourier transform;
#X obj 357 57 loadbang;
#X msg 357 80 \; pd dsp 1 \; window-size 1024;
#X text 193 355 ... but not less than zero;
#X text 101 561 real inverse Fourier transform;
#X text 196 498 normalize by 2/(3N) where N is window size;
#X text 168 332 current power ("s") minus level-adjusted mask ("m")
;
#X text 156 175 compute power (call it "s") in each channel;
#X obj 123 395 +~ 1e-20;
#X text 203 395 protect against division by zero;
#X text 179 426 compute sqrt((s-m)/s) where "s";
#X text 296 204 <- subwindow calculates noise mask;
#X obj 98 499 /~ 1536;
#X connect 0 0 9 0;
#X connect 1 0 16 1;
#X connect 2 0 11 1;
#X connect 3 0 7 0;
#X connect 4 0 8 1;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 0 10 0;
#X connect 7 0 10 1;
#X connect 7 1 4 0;
#X connect 7 1 2 0;
#X connect 7 1 2 1;
#X connect 8 0 0 0;
#X connect 10 0 11 0;
#X connect 11 0 16 0;
#X connect 11 0 23 0;
#X connect 11 0 32 0;
#X connect 12 0 1 1;
#X connect 13 0 18 0;
#X connect 16 0 17 0;
#X connect 17 0 13 0;
#X connect 18 0 36 0;
#X connect 20 0 1 0;
#X connect 21 0 3 1;
#X connect 22 0 0 1;
#X connect 25 0 26 0;
#X connect 32 0 13 1;
#X connect 36 0 6 1;
#X connect 36 0 4 1;
#X restore 198 600 pd fft-analysis;
#X obj 89 564 +~;
#X obj 209 562 +~;
#X obj 306 536 *~;
#X obj 306 427 noise~;
#X obj 328 510 dbtorms;
#X obj 306 452 bp~ 10000 3;
#X floatatom 327 492 5 0 70 0 - - -, f 5;
#X obj 391 278 sel 1;
#X obj 392 310 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 392 338 int 1;
#X obj 392 369 t f b f;
#X obj 392 397 int 0;
#X obj 392 428 +;
#X floatatom 436 450 10 0 0 0 - - -, f 10;
#X obj 392 450 s fib;
#X obj 419 299 r fib;
#X text 477 304 reset;
#X obj 516 269 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 438 476 / 10;
#X msg 479 321 1;
#X obj 326 473 clip 0 67;
#X obj 226 468 r onOff;
#X obj 295 492 *~;
#X connect 0 0 1 0;
#X connect 2 0 6 0;
#X connect 2 0 8 0;
#X connect 3 0 35 0;
#X connect 4 0 17 0;
#X connect 6 0 5 0;
#X connect 9 0 11 0;
#X connect 11 0 10 0;
#X connect 12 0 20 1;
#X connect 13 0 4 1;
#X connect 15 0 36 0;
#X connect 16 0 12 0;
#X connect 17 0 3 0;
#X connect 17 0 15 0;
#X connect 18 0 17 1;
#X connect 19 0 22 0;
#X connect 19 0 42 0;
#X connect 20 0 4 0;
#X connect 21 0 24 0;
#X connect 22 0 20 0;
#X connect 22 0 13 0;
#X connect 22 1 23 0;
#X connect 23 0 4 0;
#X connect 24 0 2 0;
#X connect 25 0 28 0;
#X connect 26 0 14 0;
#X connect 30 0 25 0;
#X connect 34 0 14 1;
#X connect 35 0 26 0;
#X connect 36 0 34 0;
#X connect 37 0 36 1;
#X connect 37 0 35 1;
#X connect 38 0 40 0;
#X connect 39 0 37 1;
#X connect 40 0 57 0;
#X connect 41 0 39 0;
#X connect 42 0 43 0;
#X connect 43 0 44 0;
#X connect 44 0 45 0;
#X connect 45 0 46 1;
#X connect 45 1 46 0;
#X connect 45 2 47 1;
#X connect 46 0 47 0;
#X connect 46 0 48 0;
#X connect 47 0 49 0;
#X connect 48 0 53 0;
#X connect 48 0 55 0;
#X connect 50 0 44 1;
#X connect 52 0 54 0;
#X connect 52 0 30 0;
#X connect 53 0 25 0;
#X connect 54 0 46 1;
#X connect 54 0 44 0;
#X connect 55 0 41 0;
#X connect 56 0 57 1;
#X connect 57 0 37 0;
